---
openapi: 3.0.1
info:
  title: Library Management API
  version: v1
  description: A comprehensive API for managing library operations including books,
    book copies, reservations, and user management.
  contact:
    name: Library API Team
    email: api-support@library.com
paths:
  "/login":
    post:
      summary: User Login
      tags:
      - Authentication
      description: Authenticate user and receive JWT token
      parameters: []
      responses:
        '200':
          description: successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: object
                    properties:
                      code:
                        type: integer
                        example: 200
                      message:
                        type: string
                        example: Logged in successfully.
                  data:
                    type: object
                    properties:
                      user:
                        "$ref": "#/components/schemas/User"
        '401':
          description: invalid credentials
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
        '422':
          description: invalid parameters
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ValidationError"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    email:
                      type: string
                      format: email
                      example: user@example.com
                    password:
                      type: string
                      example: password123
                  required:
                  - email
                  - password
  "/logout":
    delete:
      summary: User Logout
      tags:
      - Authentication
      description: Logout user and invalidate JWT token
      security:
      - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        description: Bearer token for authentication
        schema:
          type: string
      responses:
        '200':
          description: successful logout
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: object
                    properties:
                      code:
                        type: integer
                        example: 200
                      message:
                        type: string
                        example: Logged out successfully.
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorLogout"
  "/signup":
    post:
      summary: User Registration
      tags:
      - Authentication
      description: Register a new user account
      parameters: []
      responses:
        '201':
          description: successful registration
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: object
                    properties:
                      code:
                        type: integer
                        example: 201
                      message:
                        type: string
                        example: Signed up successfully.
                  data:
                    type: object
                    properties:
                      user:
                        "$ref": "#/components/schemas/User"
        '422':
          description: validation errors
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ValidationError"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    email:
                      type: string
                      format: email
                      example: newuser@example.com
                    password:
                      type: string
                      example: password123
                    password_confirmation:
                      type: string
                      example: password123
                    name:
                      type: string
                      example: John Doe
                    birthdate:
                      type: string
                      format: date
                      example: '1990-01-01'
                    address:
                      type: object
                      example:
                        street: 123 Main St
                        city: Anytown
                        state: CA
                        zip: '12345'
                    phone_number:
                      type: string
                      example: 555-123-4567
                  required:
                  - email
                  - password
                  - password_confirmation
                  - name
                  - birthdate
                  - address
                  - phone_number
  "/api/v1/books/{book_id}/book_copies":
    parameters:
    - name: book_id
      in: path
      description: Book ID
      required: true
      schema:
        type: integer
    get:
      summary: List Book Copies
      tags:
      - Book Copies
      description: Retrieve all copies of a specific book with optional filtering
      security:
      - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        description: Bearer token for authentication
        schema:
          type: string
      - name: page
        in: query
        description: Page number for pagination
        required: false
        schema:
          type: integer
      - name: per_page
        in: query
        description: Number of items per page
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  book_copies:
                    type: array
                    items:
                      "$ref": "#/components/schemas/BookCopy"
                  meta:
                    "$ref": "#/components/schemas/PaginationMeta"
        '404':
          description: book not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
    post:
      summary: Create Book Copy
      tags:
      - Book Copies
      description: Create a new copy of a book (librarians only)
      security:
      - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        description: Bearer token for authentication
        schema:
          type: string
      responses:
        '201':
          description: book copy created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/BookCopy"
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UnauthorizedError"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                book_copy:
                  type: object
                  properties:
                    book_serial_number:
                      type: string
                    available:
                      type: boolean
  "/api/v1/books/{book_id}/book_copies/{id}":
    parameters:
    - name: book_id
      in: path
      description: Book ID
      required: true
      schema:
        type: integer
    - name: id
      in: path
      description: Book Copy ID
      required: true
      schema:
        type: integer
    put:
      summary: Update Book Copy
      tags:
      - Book Copies
      description: Update an existing book copy (librarians only)
      security:
      - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        description: Bearer token for authentication
        schema:
          type: string
      responses:
        '200':
          description: book copy updated
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/BookCopy"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                book_copy:
                  type: object
                  properties:
                    book_serial_number:
                      type: string
                    available:
                      type: boolean
    delete:
      summary: Delete Book Copy
      tags:
      - Book Copies
      description: Delete a book copy (librarians only)
      security:
      - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        description: Bearer token for authentication
        schema:
          type: string
      responses:
        '204':
          description: book copy deleted
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UnauthorizedError"
  "/api/v1/book_copies/{id}":
    parameters:
    - name: id
      in: path
      description: Book Copy ID
      required: true
      schema:
        type: integer
    get:
      summary: Show Book Copy
      tags:
      - Book Copies
      description: Retrieve a specific book copy by ID
      security:
      - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        description: Bearer token for authentication
        schema:
          type: string
      responses:
        '200':
          description: book copy found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/BookCopy"
  "/api/v1/books":
    get:
      summary: List Books
      tags:
      - Books
      description: Retrieve a list of books with optional filtering and pagination
      security:
      - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        description: Bearer token for authentication
        schema:
          type: string
      - name: title
        in: query
        description: Filter by book title
        required: false
        schema:
          type: string
      - name: author
        in: query
        description: Filter by author name
        required: false
        schema:
          type: string
      - name: publisher
        in: query
        description: Filter by publisher
        required: false
        schema:
          type: string
      - name: genre
        in: query
        description: Filter by book genre
        required: false
        schema:
          type: string
      - name: page
        in: query
        description: Page number for pagination
        required: false
        schema:
          type: integer
      - name: per_page
        in: query
        description: Number of items per page
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  books:
                    type: array
                    items:
                      "$ref": "#/components/schemas/Book"
                  meta:
                    "$ref": "#/components/schemas/PaginationMeta"
                  filters:
                    type: object
                    properties:
                      title:
                        type: string
                      author:
                        type: string
                      publisher:
                        type: string
                      genre:
                        type: string
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UnauthorizedError"
    post:
      summary: Create Book
      tags:
      - Books
      description: Create a new book (librarians only)
      security:
      - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        description: Bearer token for authentication
        schema:
          type: string
      responses:
        '201':
          description: book created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Book"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UnauthorizedError"
        '403':
          description: forbidden - members cannot create books
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UnauthorizedError"
        '422':
          description: validation errors
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ValidationError"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                book:
                  type: object
                  properties:
                    title:
                      type: string
                      example: The Ruby Programming Language
                    author:
                      type: string
                      example: Matz Yukihiro
                    publisher:
                      type: string
                      example: O'Reilly Media
                    edition:
                      type: string
                      example: 1st Edition
                    year:
                      type: integer
                      example: 2008
                    isbn:
                      type: string
                      example: 978-0-596-51617-8
                    genre:
                      type: string
                      example: Programming
                  required:
                  - title
                  - author
                  - publisher
                  - edition
                  - year
  "/api/v1/books/{id}":
    parameters:
    - name: id
      in: path
      description: Book ID
      required: true
      schema:
        type: integer
    get:
      summary: Show Book
      tags:
      - Books
      description: Retrieve a specific book by ID
      security:
      - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        description: Bearer token for authentication
        schema:
          type: string
      responses:
        '200':
          description: book found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Book"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UnauthorizedError"
    put:
      summary: Update Book
      tags:
      - Books
      description: Update an existing book (librarians only)
      security:
      - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        description: Bearer token for authentication
        schema:
          type: string
      responses:
        '200':
          description: book updated
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Book"
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UnauthorizedError"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                book:
                  type: object
                  properties:
                    title:
                      type: string
                    author:
                      type: string
                    publisher:
                      type: string
                    edition:
                      type: string
                    year:
                      type: integer
                    isbn:
                      type: string
                    genre:
                      type: string
    delete:
      summary: Delete Book
      tags:
      - Books
      description: Delete a book (librarians only)
      security:
      - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        description: Bearer token for authentication
        schema:
          type: string
      responses:
        '204':
          description: book deleted
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UnauthorizedError"
  "/api/v1/dashboard":
    get:
      summary: Get Dashboard Data
      tags:
      - Dashboard
      description: Retrieve dashboard statistics and data based on user role
      security:
      - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        description: Bearer token for authentication
        schema:
          type: string
      responses:
        '200':
          description: successful - member dashboard
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Dashboard"
                type: object
                properties:
                  user_reservations:
                    type: array
                    items:
                      "$ref": "#/components/schemas/Reservation"
                  active_count:
                    type: integer
                    example: 2
                  overdue_count:
                    type: integer
                    example: 1
  "/api/v1/reservations":
    get:
      summary: List Reservations
      tags:
      - Reservations
      description: Retrieve a list of reservations with optional filtering and pagination
      security:
      - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        description: Bearer token for authentication
        schema:
          type: string
      - name: user_id
        in: query
        description: Filter by user ID
        required: false
        schema:
          type: integer
      - name: book_copies
        in: query
        description: Filter by book copy
        required: false
        schema:
          type: string
      - name: book
        in: query
        description: Filter by book
        required: false
        schema:
          type: string
      - name: return_date_range
        in: query
        properties:
          start:
            type: string
            format: date
          end:
            type: string
            format: date
        description: Filter by return date range (JSON format)
        example:
          start: '2023-01-01'
          end: '2023-01-31'
        required: false
        schema:
          type: object
      - name: overdue
        in: query
        description: Filter overdue reservations (true/false)
        required: false
        schema:
          type: string
      - name: page
        in: query
        description: Page number for pagination
        required: false
        schema:
          type: integer
      - name: per_page
        in: query
        description: Number of items per page
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  reservations:
                    type: array
                    items:
                      "$ref": "#/components/schemas/Reservation"
                  meta:
                    "$ref": "#/components/schemas/PaginationMeta"
                  filters:
                    type: object
                    properties:
                      user_id:
                        type: integer
                      book_copies:
                        type: string
                      book:
                        type: string
                      return_date_range:
                        type: string
                      overdue:
                        type: string
  "/api/v1/reservations/{id}":
    parameters:
    - name: id
      in: path
      description: Reservation ID
      required: true
      schema:
        type: integer
    get:
      summary: Show Reservation
      tags:
      - Reservations
      description: Retrieve a specific reservation by ID
      security:
      - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        description: Bearer token for authentication
        schema:
          type: string
      responses:
        '200':
          description: reservation found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Reservation"
  "/api/v1/reservations/create":
    post:
      summary: Create Reservation
      tags:
      - Reservations
      description: Create a new book reservation
      security:
      - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        description: Bearer token for authentication
        schema:
          type: string
      responses:
        '201':
          description: reservation created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Reservation"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reservation:
                  type: object
                  properties:
                    book_copy_id:
                      type: integer
                      example: 1
                    user_id:
                      type: integer
                      example: 1
                      description: Optional - defaults to current user
                    return_date:
                      type: string
                      format: date
                      example: '2025-10-15'
                  required:
                  - book_copy_id
                  - return_date
  "/api/v1/reservations/{id}/return":
    parameters:
    - name: id
      in: path
      description: Reservation ID
      required: true
      schema:
        type: integer
    patch:
      summary: Return Book
      tags:
      - Reservations
      description: Mark a book as returned (librarians only)
      security:
      - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        description: Bearer token for authentication
        schema:
          type: string
      responses:
        '200':
          description: book returned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Book returned successfully
servers:
- url: http://localhost:3000
  description: Development server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication. Include the token in the Authorization
        header with "Bearer " prefix.
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          format: email
          example: user@example.com
        name:
          type: string
          example: John Doe
        address:
          type: object
          properties:
            street:
              type: string
              example: 123 Main St
            city:
              type: string
              example: Anytown
            state:
              type: string
              example: CA
            zip:
              type: string
              example: '12345'
        role:
          type: string
          enum:
          - member
          - librarian
          example: member
          description: User role in the library system
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
      - id
      - email
      - name
      - role
    Book:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: The Ruby Programming Language
        author:
          type: string
          example: Matz Yukihiro
        publisher:
          type: string
          example: O'Reilly Media
        edition:
          type: string
          example: 1st Edition
        year:
          type: integer
          example: 2008
        isbn:
          type: string
          example: 978-0-596-51617-8
        genre:
          type: string
          example: Programming
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
      - id
      - title
      - author
      - publisher
      - edition
      - year
    BookCopy:
      type: object
      properties:
        id:
          type: integer
          example: 1
        book_id:
          type: integer
          example: 1
        available:
          type: boolean
          example: true
        condition:
          type: string
          enum:
          - excellent
          - good
          - fair
          - poor
          example: good
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
      - id
      - book_id
      - available
    Reservation:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        book_copy_id:
          type: integer
          example: 1
        return_date:
          type: string
          format: date
          example: '2025-10-15'
        returned_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
      - id
      - user_id
      - book_copy_id
      - return_date
    Dashboard:
      type: object
      properties:
        total_books:
          type: integer
          example: 150
        available_books:
          type: integer
          example: 120
        borrowed_books:
          type: integer
          example: 30
        overdue_books:
          type: integer
          example: 5
        total_reservations:
          type: integer
          example: 45
        active_reservations:
          type: integer
          example: 30
        users_with_overdue_books:
          type: array
          items:
            "$ref": "#/components/schemas/User"
    ErrorLogout:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
          example:
          - User has no active session.
    Error:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
          example:
          - Email has already been taken
    UnauthorizedError:
      type: object
      properties:
        message:
          type: string
          example: Not authorized
    ValidationError:
      type: object
      properties:
        message:
          type: string
          example: Validation failed
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          example:
            email:
            - has already been taken
            password:
            - is too short (minimum is 6 characters)
    PaginationMeta:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
        next_page:
          type: integer
          nullable: true
          example: 2
        prev_page:
          type: integer
          nullable: true
          example:
        total_pages:
          type: integer
          example: 5
        total_count:
          type: integer
          example: 100
security:
- bearerAuth: []
